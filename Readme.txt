https://api.telegram.org/bot6025109750:AAFx7-_82D3o1FQd_riWhtUY96hbA9Xoq7M/getMe

6025109750:AAFx7-_82D3o1FQd_riWhtUY96hbA9Xoq7M


Prometheus+Grafana

Prometheus - база данных временных рядов, обычно используется для сбора метрик и создания мониторинга.Prometheus скорейпит метрики через 
HTTP-вызовы, которые по определенному адресу постят экспортеры, подвязанные к нужному нам приложению. 
В прометее метрики хранятся в формате ключ-значение, то есть передается время снятия метрики и ее значение.
Prometheus сам собирает метрики(делает Pull), в отличии от InfluxDB, в которую их надо пушить(push)
Не забываем про язык запросов к прометею PromQL, за счет них мы делаем выборку нужных нам метрик
Способы передачи метрик:
1.Инструментирование приложений-приложение должно само размещать нужные нам метрики,а прометей будет их забирать 
2.Использование Pushgateway-в схеме выглядит как некий посредник между прометеем и конечной системой, 
конечная система пушит метрики в Pushgateway, а прометей забирает их оттуда.
3.Ипользование ГОТОВЫХ экспортеров-САМЫЙ УДОБНЫЙ БЫСТРЫЙ ПОНЯТНЫЙ способ. Экспортер выглядит как доп. приложение, которое мы прописываем
в конфиге прометея(job_name:) и прописываем таргет.
Существует большое количество различных экспортеров: для мониторинга Unix систем - nodeExporter 
													для мониторинга баз данных -SQLExporter 
													//////////////////////////////////////
Экосистема Prometheus:
1.Alertmanager отправка оповещений в соответствии с правилама в конфиге
2.Визуализация данных Имеется свой веб интерфейс, но лучше использовать Grafana
3.Обнаружение сервисов Динамическое обнаружение КС, особенно удобно с контейнерами
Все данные для настройки хранятся в конфиг файле, конфиг файл выглядит так,конфиг файл очень удобно использовать, ведь в нем все настройки:

# my global config
global:
  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          # - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: "prometheus"

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

    static_configs:
      - targets: ["localhost:9090"]


  - job_name: "node_exporter"
    static_configs:
      - targets: ["localhost:9100"]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////


Напомню, что модель данных у нас ключ-значение
1.Prometheus Data Model
cpu_usage  14.04
   key     value

cpu_usage {core="1",ip="localhost"} 14.04
  key            labels            value  

Labels(ярлыки) используются для более конкретного понимания метрик, может содержать какую либо metadata
2.Prometheus Data Filtering
cpu_usage {core!~"2"} 14.04
  key     basic filter
Типы метрик: ТУТ ЛУЧШЕ РАЗОБРАТЬСЯ
1.Счетчик - только увеличивает значение или обнуляет.(Удобно считать ошибки)
2.Измеритель - Не показывает развитие метрики за время.Используя Измеритель можно упустить нерегулярные изменения метрики со временем
3.Гистограмма - Предоставляет доп информацию(сумма измерений и их кол-во)Для рассчета среднего и относительных измерений 
4.Сводка - расширенные гистограммы-Сумма и кол-во измерений + Квантили за скользящий период.


Графики и алертинг можно настроить и в самом прометее, но есть куда более удобный и информативный инcтрумент - Grafana 

Первое, что нужно сделать после установки Grafana - указать ей DataSource, выбираем Prometheus.
Подвязав прометеус к графане, мы можем пользоваться всеми доступными нам инструментами.
1.Дашборды
2.Графики(можно по встроенным интрументам, можно просто по значениям одной из метрик,в зависимости их экспортера), также 
не забываем про возможности PromQL, там мы можем выстроить большое количество сочетаний метрик друг с другом и выстроить нужный нам графики.
3.Алертинг гибко настраиваемый алертинг, исходя из различных метрик/запросов PromQl + ШИРОКИЙ выбор инструментов для получения этих алертов,
телеграм настраивается за пару секунд

НЕ ЗАБЫВАЕМ про политики нотификаций.





													
												
											